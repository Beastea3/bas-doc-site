"use strict";(self.webpackChunkbas_doc=self.webpackChunkbas_doc||[]).push([[897],{4212:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=t(5893),i=t(1151);const s={},r="JS SDK Doc",o={id:"sdk/js",title:"JS SDK Doc",description:"Here, you will find all the necessary information to begin integrating BAS into a Javascript/Typescript project.",source:"@site/docs/sdk/js.md",sourceDirName:"sdk",slug:"/sdk/js",permalink:"/sdk/js",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Quick Start",permalink:"/quick_start"},next:{title:"Attestation with Greenfield",permalink:"/tutorials/attestation_in_gf"}},c={},d=[{value:"Installing the BAS SDK",id:"installing-the-bas-sdk",level:2},{value:"Import Scripts Required by GreenField",id:"import-scripts-required-by-greenfield",level:3},{value:"Using the BAS SDK",id:"using-the-bas-sdk",level:2},{value:"Registering a Schema",id:"registering-a-schema",level:3},{value:"Getting Schema Information",id:"getting-schema-information",level:3},{value:"Getting an Attestation",id:"getting-an-attestation",level:3},{value:"Usage",id:"usage",level:3},{value:"Output",id:"output",level:3},{value:"Creating On-chain Attestations",id:"creating-on-chain-attestations",level:3},{value:"Creating Off-chain Attestations without Saving to GreenField",id:"creating-off-chain-attestations-without-saving-to-greenfield",level:3},{value:"Creating Off-chain Attestation and Saving to GreenField",id:"creating-off-chain-attestation-and-saving-to-greenfield",level:3},{value:"Revoking On-chain Attestations",id:"revoking-on-chain-attestations",level:3},{value:"Revoking Off-chain Attestations",id:"revoking-off-chain-attestations",level:3},{value:"Get offchain Attestation from GreenField",id:"get-offchain-attestation-from-greenfield",level:3},{value:"Change Visibility of Attestations on GreenField",id:"change-visibility-of-attestations-on-greenfield",level:3},{value:"Verify an Off-chain Attestation",id:"verify-an-off-chain-attestation",level:3},{value:"Naming a Schema and Describe a Schema on the BAScan",id:"naming-a-schema-and-describe-a-schema-on-the-bascan",level:3}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"js-sdk-doc",children:"JS SDK Doc"}),"\n",(0,a.jsx)(n.p,{children:"Here, you will find all the necessary information to begin integrating BAS into a Javascript/Typescript project."}),"\n",(0,a.jsx)(n.h2,{id:"installing-the-bas-sdk",children:"Installing the BAS SDK"}),"\n",(0,a.jsx)(n.p,{children:"To install the BAS JS SDK, run the following command within your project directory:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"yarn add @bnb-attestation-service/bas-sdk\n"})}),"\n",(0,a.jsx)(n.p,{children:"OR"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install @bnb-attestation-service/bas-sdk\n"})}),"\n",(0,a.jsx)(n.p,{children:"OR"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pnpm add @bnb-attestation-service/bas-sdk\n"})}),"\n",(0,a.jsx)("aside",{children:(0,a.jsx)(n.p,{children:"\ud83d\udca1 If you want to save attestations into GreenField Storage You need to import file-handle.wasm, please see the example below."})}),"\n",(0,a.jsx)(n.h3,{id:"import-scripts-required-by-greenfield",children:"Import Scripts Required by GreenField"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<head>\n <script src="https://unpkg.com/@bnb-chain/greenfiled-file-handle@0.2.1/dist/browser/umd/index.js"><\/script>\n <script    src="https://unpkg.com/@bnb-chain/greenfiled-file-handle@0.2.1/dist/node/file-handle.wasm"><\/script>\n</head>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"using-the-bas-sdk",children:"Using the BAS SDK"}),"\n",(0,a.jsx)(n.p,{children:"To begin, we must import and initialize the library before exploring its functionality."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import { BAS, Offchain, SchemaEncoder, SchemaRegistry } from "@bnb-attestation-service/bas-sdk";\nimport { ethers } from \'ethers\';\n\nexport const BASContractAddress = "0x6c2270298b1e6046898a322acB3Cbad6F99f7CBD"; //bnb testnet\n\n// Initialize the sdk with the address of the BAS Schema contract address\nconst bas = new BAS(BASContractAddress);\n\n// Gets a default provider (in production use something else like infura/alchemy)\nconst provider = ethers.providers.getDefaultProvider(\n  "sepolia"\n);\n\n// Connects an ethers style provider/signingProvider to perform read/write functions.\n// MUST be a signer to do write operations!\nbas.connect(provider);\n'})}),"\n",(0,a.jsx)("aside",{children:(0,a.jsx)(n.p,{children:"\ud83d\udca1 If you want to use features related to GreenField, you need to init the client with your address"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"  const gfClient = bas.greenFieldClient;  gfClient.init(address);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"registering-a-schema",children:"Registering a Schema"}),"\n",(0,a.jsxs)(n.p,{children:["To register a new schema, you can use the\xa0",(0,a.jsx)(n.code,{children:"register"}),"\xa0function provided by the BAS SDK. This function takes an object with the following properties:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"schema"}),": The schema string that defines the structure of the data to be attested."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"resolverAddress"}),": The Ethereum address of the resolver responsible for managing the schema."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"revocable"}),": A boolean value indicating whether attestations created with this schema can be revoked."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Here\u2019s an example of how to register a new schema:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import { SchemaRegistry } from "@bnb-attestation-service/bas-sdk";\n\nconst schemaRegistryContractAddress = "0xYourSchemaRegistryContractAddress";\nconst schemaRegistry = new SchemaRegistry(schemaRegistryContractAddress);\n\nschemaRegistry.connect(signer);\n\nconst schema = "uint256 eventId, uint8 voteIndex";\nconst resolverAddress = "0x08C8b8417313fF130526862f90cd822B55002D72";// bnb testnet\nconst revocable = true;\n\nconst transaction = await schemaRegistry.register({\n  schema,\n  resolverAddress,\n  revocable,\n});\n\n// Optional: Wait for transaction to be validated\nawait transaction.wait();\n'})}),"\n",(0,a.jsx)(n.p,{children:"Once you have registered a schema, you can utilize its UID to generate attestations that adhere to the designated structure."}),"\n",(0,a.jsx)(n.h3,{id:"getting-schema-information",children:"Getting Schema Information"}),"\n",(0,a.jsxs)(n.p,{children:["To obtain the schema information for a particular schema UID, you can utilize the ",(0,a.jsx)(n.code,{children:"getSchema"})," function provided by the BAS SDK. Here is an example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { SchemaRegistry } from \"@bnb-attestation-service/bas-sdk\";\n\nconst schemaRegistryContractAddress = \"0x08C8b8417313fF130526862f90cd822B55002D72\";//bnb testnet\nconst schemaRegistry = new SchemaRegistry(schemaRegistryContractAddress);\nschemaRegistry.connect(provider);\n\nconst schemaUID = \"0xYourSchemaUID\";\n\nconst schemaRecord = await schemaRegistry.getSchema({ uid: schemaUID });\n\nconsole.log(schemaRecord);\n\n// Example Output\n{\n  uid: '0xYourSchemaUID',\n  schema: 'bytes32 proposalId, bool vote',\n  resolver: '0xResolverAddress',\n  revocable: true\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"In the output, you will receive an object that includes the schema UID, the schema string, the resolver address, and a boolean flag indicating if the schema can be revoked or not."}),"\n",(0,a.jsx)(n.h3,{id:"getting-an-attestation",children:"Getting an Attestation"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"getAttestation"})," function enables you to fetch an onchain attestation for a specific UID. This function will return an attestation object that includes details about the attestation, such as the schema, recipient, attester, and other relevant information."]}),"\n",(0,a.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import { BAS } from "@bnb-attestation-service/bas-sdk";\n\nconst bas = new BAS(BASContractAddress);\nbas.connect(provider);\n\nconst uid = "0xff08bbf3d3e6e0992fc70ab9b9370416be59e87897c3d42b20549901d2cccc3e";\n\nconst attestation = await bas.getAttestation(uid);\n\nconsole.log(attestation);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"getAttestation"})," function confidently returns an attestation object with the following properties:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"uid"}),": The unique identifier of the attestation."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"schema"}),": The schema identifier associated with the attestation."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"refUID"}),": The reference UID of the attestation, if any."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"time"}),": The Unix timestamp when the attestation was created."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"expirationTime"}),": The Unix timestamp when the attestation expires (0 for no expiration)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"revocationTime"}),": The Unix timestamp when the attestation was revoked, if applicable."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"recipient"}),": The Ethereum address of the recipient of the attestation."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"attester"}),": The Ethereum address of the attester who created the attestation."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"revocable"}),": A boolean indicating whether the attestation is revocable or not."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"data"}),": The attestation data in bytes format."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Example output:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"{\n    uid: '0x5134f511e0533f997e569dac711952dde21daf14b316f3cce23835defc82c065',\n    schema: '0x27d06e3659317e9a4f8154d1e849eb53d43d91fb4f219884d1684f86d797804a',\n    refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    time: 1671219600,\n    expirationTime: 0,\n    revocationTime: 1671219636,\n    recipient: '0xFD50b031E778fAb33DfD2Fc3Ca66a1EeF0652165',\n    attester: '0x1e3de6aE412cA218FD2ae3379750388D414532dc',\n    revocable: true,\n    data: '0x0000000000000000000000000000000000000000000000000000000000000000'\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"creating-on-chain-attestations",children:"Creating On-chain Attestations"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"attest"})," function enables you to confidently create an on-chain attestation for a specific schema. This powerful function accepts an object with the following properties:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"schema"}),": The unique identifier (UID) of the schema for which the attestation is being created."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"data"}),": An object that contains the following properties:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"recipient"}),": The Ethereum address of the attestation recipient."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"expirationTime"}),": A Unix timestamp that represents the expiration time of the attestation. You can set it to ",(0,a.jsx)(n.code,{children:"0"})," for no expiration."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"revocable"}),": A boolean value that indicates whether the attestation can be revoked or not."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"refUID"}),": (Optional) The UID of a referenced attestation. If there is no reference, use ",(0,a.jsx)(n.code,{children:"ZERO_BYTES32"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"data"}),": The encoded data for the attestation, which should be generated using the ",(0,a.jsx)(n.code,{children:"SchemaEncoder"})," class."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This function gracefully returns a Promise that resolves to the UID of the newly created attestation."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import { BAS, SchemaEncoder } from "@bnb-attestation-service/bas-sdk";\n\nconst bas = new BAS(BASContractAddress);\nbas.connect(signer);\n\n// Initialize SchemaEncoder with the schema string\nconst schemaEncoder = new SchemaEncoder("uint256 eventId, uint8 voteIndex");\nconst encodedData = schemaEncoder.encodeData([\n  { name: "eventId", value: 1, type: "uint256" },\n  { name: "voteIndex", value: 1, type: "uint8" },\n]);\n\nconst schemaUID = "0xb16fa048b0d597f5a821747eba64efa4762ee5143e9a80600d0005386edfc995";\n\nconst tx = await bas.attest({\n  schema: schemaUID,\n  data: {\n    recipient: "0xFD50b031E778fAb33DfD2Fc3Ca66a1EeF0652165",\n    expirationTime: 0,\n    revocable: true,// Be aware that if your schema is not revocable, this MUST be false\n    data: encodedData,\n  },\n});\n\nconst newAttestationUID = await tx.wait();\n\nconsole.log("New attestation UID:", newAttestationUID);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"creating-off-chain-attestations-without-saving-to-greenfield",children:"Creating Off-chain Attestations without Saving to GreenField"}),"\n",(0,a.jsxs)(n.p,{children:["To generate an off-chain attestation, you can confidently utilize the ",(0,a.jsx)(n.code,{children:"signOffchainAttestation"})," function offered by the Off-chain class in the BAS SDK. Here\u2019s an example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import { SchemaEncoder } from "@bnb-attestation-service/bas-sdk";\n\nconst offchain = await bas.getOffchain();\n\n// Initialize SchemaEncoder with the schema string\nconst schemaEncoder = new SchemaEncoder("uint256 eventId, uint8 voteIndex");\nconst encodedData = schemaEncoder.encodeData([\n  { name: "eventId", value: 1, type: "uint256" },\n  { name: "voteIndex", value: 1, type: "uint8" },\n]);\n\n// Signer is an ethers.js Signer instance\nconst signer = new ethers.Wallet(privateKey, provider);\n\nconst offchainAttestation = await offchain.signOffchainAttestation({\n  recipient: \'0xFD50b031E778fAb33DfD2Fc3Ca66a1EeF0652165\',\n// Unix timestamp of when attestation expires. (0 for no expiration)\n  expirationTime: 0,\n// Unix timestamp of current time\n  time: 1671219636,\n  revocable: true,// Be aware that if your schema is not revocable, this MUST be false\n  version: 1,\n  nonce: 0,\n  schema: "0xb16fa048b0d597f5a821747eba64efa4762ee5143e9a80600d0005386edfc995",\n  refUID: \'0x0000000000000000000000000000000000000000000000000000000000000000\',\n  data: encodedData,\n}, signer);\n'})}),"\n",(0,a.jsx)(n.p,{children:"This function will confidently generate an attestation object off-chain, which will be signed and contain the UID, signature, and attestation data. You can confidently share this object with the intended recipient or confidently store it for future use."}),"\n",(0,a.jsx)(n.h3,{id:"creating-off-chain-attestation-and-saving-to-greenfield",children:"Creating Off-chain Attestation and Saving to GreenField"}),"\n",(0,a.jsxs)(n.p,{children:["To generate an off-chain attestation and save the result to GreenField Storage, you can confidently utilize the ",(0,a.jsx)(n.code,{children:"attestOffChain"})," function offered by the BAS SDK. Here\u2019s an example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'  const offchain = await bas.getOffchain();\n\n  // Use wallet or client to ensure the chain is BNB\n  // [WARN]: should call an async function\n  await shouldSwitchNetwork(chains[1].id); // BNB chainId\n\n  // Attest offchain\n  const attestation = await attestOffChain({\n    schemaStr: attestParams.schemaStr,\n    schemaUID: attestParams.schemaUID,\n    data: attestParams.data,\n    recipient: attestParams.recipient,\n    revocable: attestParams.revocable,\n  });\n\n  const attestationUID = attestation.uid;\n\n  // Use wallet or client to ensure the chain is Greenfield Chain\n  await shouldSwitchNetwork(chains[0].id);\n  const provider = await connector?.getProvider({ chainId: chains[0].id });\n\n  BigInt.prototype.toJSON = function () {\n    return this.toString();\n  };\n\n  // Encode the attestation object into blob to store on the Greenfield Storage\n  const str = JSON.stringify(attestation);\n  const bytes = new TextEncoder().encode(str);\n  const blob = new Blob([bytes], {\n    type: "application/json;charset=utf-8",\n  });\n\n  let res;\n  try {\n    // Use GreenField SDK to store the attestation\n    res = await gfClient.createObject(\n      provider,\n      new File([blob], `${attestParams.schemaUID}.${attestationUID}`),\n      attestParams.isPrivate || true\n    );\n  } catch (err: any) {\n    console.log(err);\n    alert(err.message);\n  }\n'})}),"\n",(0,a.jsx)(n.p,{children:"This function will generate an attestation object off-chain. The attestation object will be signed and will contain the UID, signature, and attestation data. Similar to the previous function, you can also save it to greenfield storage and set the access according to your preferences."}),"\n",(0,a.jsx)(n.h3,{id:"revoking-on-chain-attestations",children:"Revoking On-chain Attestations"}),"\n",(0,a.jsx)(n.p,{children:"Revoking an attestation can only happen from the issuer address."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'const transaction = await bas.revoke({\n  schema: "0x85500e806cf1e74844d51a20a6d893fe1ed6f6b0738b50e43d774827d08eca61",\n  data: { uid: "0x6776de8122c352b4d671003e58ca112aedb99f34c629a1d1fe3b332504e2943a" }\n});\n\n// Optional: Wait for transaction to be validated\nawait transaction.wait();\n'})}),"\n",(0,a.jsx)(n.h3,{id:"revoking-off-chain-attestations",children:"Revoking Off-chain Attestations"}),"\n",(0,a.jsxs)(n.p,{children:["To revoke an off-chain attestation, you can use the\xa0",(0,a.jsx)(n.code,{children:"revokeOffchain"}),"\xa0function provided by the BAS SDK. Here\u2019s an example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { BAS } from \"@bnb-attestation-service/bas-sdk\";\n\nconst bas = new BAS(BASContractAddress);\nbas.connect(provider);\n\nconst data = ethers.utils.formatBytes32String('0x6776de8122c352b4d671003e58ca112aedb99f34c629a1d1fe3b332504e2943a');\n\nconst transaction = await bas.revokeOffchain(data);\n\n// Optional: Wait for transaction to be validated\nawait transaction.wait();\n"})}),"\n",(0,a.jsx)(n.h3,{id:"get-offchain-attestation-from-greenfield",children:"Get offchain Attestation from GreenField"}),"\n",(0,a.jsx)(n.p,{children:"If the off-chain attestation is stored in the GreenField Storage, you can conveniently get it from the storage. Here\u2019s an example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"const provider = await connector?.getProvider();const res = await gfClient.getObject(  provider,  `${schemaUID}.${attestationUID}`);const data = JSON.parse(String(res));\n"})}),"\n",(0,a.jsx)(n.h3,{id:"change-visibility-of-attestations-on-greenfield",children:"Change Visibility of Attestations on GreenField"}),"\n",(0,a.jsxs)(n.p,{children:["You can use ",(0,a.jsx)(n.code,{children:"updateObjectVisibility"})," to change the visibility of the attestations on GreenField. Here\u2019s an example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"gfClient.updateObjectVisibility(objectName, VisibilityType.VISIBILITY_TYPE_PUBLIC_READ, _address);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"verify-an-off-chain-attestation",children:"Verify an Off-chain Attestation"}),"\n",(0,a.jsxs)(n.p,{children:["To verify an off-chain attestation, you can utilize the ",(0,a.jsx)(n.code,{children:"verifyOffchainAttestationSignature"})," function provided by the BAS SDK. Here\u2019s an example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import { OFFCHAIN_ATTESTATION_VERSION, Offchain, PartialTypedDataConfig } from "@bnb-attestation-service/bas-sdk";\n\nconst attestation = {\n// your offchain attestation\n  sig: {\n    domain: {\n      name: "BAS Attestation",\n      version: "0.26",\n      chainId: 1,\n      verifyingContract: "0xA1207F3BBa224E2c9c3c6D5aF63D0eb1582Ce587",\n    },\n    primaryType: "Attest",\n    types: {\n      Attest: [],\n    },\n    signature: {\n      r: "",\n      s: "",\n      v: 28,\n    },\n    uid: "0x5134f511e0533f997e569dac711952dde21daf14b316f3cce23835defc82c065",\n    message: {\n      version: 1,\n      schema: "0x27d06e3659317e9a4f8154d1e849eb53d43d91fb4f219884d1684f86d797804a",\n      refUID: "0x0000000000000000000000000000000000000000000000000000000000000000",\n      time: 1671219600,\n      expirationTime: 0,\n      recipient: "0xFD50b031E778fAb33DfD2Fc3Ca66a1EeF0652165",\n      attester: "0x1e3de6aE412cA218FD2ae3379750388D414532dc",\n      revocable: true,\n      data: "0x0000000000000000000000000000000000000000000000000000000000000000",\n    },\n  },\n  signer: "0x1e3de6aE412cA218FD2ae3379750388D414532dc",\n};\n\nconst BAS_CONFIG: PartialTypedDataConfig = {\n  address: attestation.sig.domain.verifyingContract,\n  version: attestation.sig.domain.version,\n  chainId: attestation.sig.domain.chainId,\n};\nconst offchain = new Offchain(BAS_CONFIG, OFFCHAIN_ATTESTATION_VERSION);\nconst isValidAttestation = offchain.verifyOffchainAttestationSignature(\n  attestation.signer,\n  attestation.sig\n);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"naming-a-schema-and-describe-a-schema-on-the-bascan",children:"Naming a Schema and Describe a Schema on the BAScan"}),"\n",(0,a.jsx)(n.p,{children:"You have the option to create a new attestation on the schema named \u201cName a Schema\u201d in order to give it a name. And also you can create a new attestation on the schema named \u201cSCHEMA DESCRIPTION\u201d in order to add a description to the schema."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'const namingSchema = async (schameUID: string, name: string) => {\n    return attestOnChain({\n      schemaStr: "bytes32 schemaId,string name",\n      schemaUID: NamingSchemaUID,\n      data: [\n        { name: "schemaId", value: schameUID, type: "bytes32" },\n        { name: "name", value: name, type: "string" },\n      ],\n      recipient: "0x0000000000000000000000000000000000000000",\n      revocable: true,\n    });\n  };\n\n  const describeSchema = async (schameUID: string, description: string) => {\n    return attestOnChain({\n      schemaStr: "bytes32 schemaId,string description",\n      schemaUID: DescribeSchameUID,\n      data: [\n        { name: "schemaId", value: schameUID, type: "bytes32" },\n        { name: "description", value: description, type: "string" },\n      ],\n      recipient: "0x0000000000000000000000000000000000000000",\n      revocable: true,\n    });\n  };\n'})})]})}function l(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var a=t(7294);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);